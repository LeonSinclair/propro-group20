#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace allocator.Views.Shared
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class layoutback : layoutbackBase
{

#line hidden

public override void Execute()
{
WriteLiteral("    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta");

WriteLiteral(" charset=\"utf-8\"");

WriteLiteral(" />\n        <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1.0\"");

WriteLiteral(" />\n        <title>");


#line 6 "layoutback.cshtml"
          Write(ViewData["Title"]);


#line default
#line hidden
WriteLiteral(" - allocator</title>\n\n        <environment");

WriteLiteral(" include=\"Development\"");

WriteLiteral(">\n            <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/lib/bootstrap/dist/css/bootstrap.css")
, false)
);
WriteLiteral(" />\n            <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/css/site.css")
, false)
);
WriteLiteral(" />\n            <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/css/style.css")
, false)
);
WriteLiteral("/>>\n            <script");

WriteLiteral(" src=\"script.js\"");

WriteLiteral("></script>\n            <link");

WriteLiteral(" href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,60" +
"0i,700,700i,800,800i\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\n\n        </environment>\n        <environment");

WriteLiteral(" exclude=\"Development\"");

WriteLiteral(">\n            <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.7/css/bootstrap.min.css\"");

WriteAttribute ("asp-fallback-href", "\n                  asp-fallback-href=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/lib/bootstrap/dist/css/bootstrap.min.css")
, false)
);
WriteLiteral("\n                  asp-fallback-test-class=\"sr-only\"");

WriteLiteral(" asp-fallback-test-property=\"position\"");

WriteLiteral(" asp-fallback-test-value=\"absolute\"");

WriteLiteral(" />\n            <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/css/site.min.css")
, false)
);
WriteLiteral(" asp-append-version=\"true\"");

WriteLiteral(@" />
        </environment>
        

    </head>
    <body>
        <!--<nav class=""navbar navbar-inverse navbar-fixed-top"">
            <div class=""container"">
                <div class=""navbar-header"">
                    <button type=""button"" class=""navbar-toggle"" data-toggle=""collapse"" data-target="".navbar-collapse"">
                        <span class=""sr-only"">Toggle navigation</span>
                        <span class=""icon-bar""></span>
                        <span class=""icon-bar""></span>
                        <span class=""icon-bar""></span>
                    </button>
                    <a asp-area="""" asp-controller=""Home"" asp-action=""Index"" class=""navbar-brand"">allocator</a>
                </div>
                <div class=""navbar-collapse collapse"">
                    <ul class=""nav navbar-nav"">
                        <li><a asp-area="""" asp-controller=""Home"" asp-action=""Index"">Home</a></li>
                        <li><a asp-area="""" asp-controller=""Home"" asp-action=""About"">About</a></li>
                        <li><a asp-area="""" asp-controller=""Home"" asp-action=""Contact"">Contact</a></li>
                    </ul>
                </div>
            </div>
        </nav>-->
      <!-- header -->
      <div");

WriteLiteral(" id=\"header_box\"");

WriteLiteral(">\n        <div");

WriteLiteral(" id=\"header_container\"");

WriteLiteral(">\n          <div");

WriteLiteral(" id=\"heading_container\"");

WriteLiteral(">\n            <h2>TRINITY COLLEGE DUBLIN, SCHOOL OF COMPUTER SCIENCE AND STATISTI" +
"CS</h2>\n            <h1>DEMONSTRATOR ALLOCATOR</h1>\n          </div>\n          <" +
"div");

WriteLiteral(" id=\"user_container\"");

WriteLiteral(">\n            <div");

WriteLiteral(" id=\"icon_container\"");

WriteLiteral(">\n                <div");

WriteLiteral(" class=\"dropdown\"");

WriteLiteral(">\n                    <button");

WriteLiteral(" onclick=\"toggle()\"");

WriteLiteral(" class=\"dropbtn\"");

WriteLiteral(">JD</button>\n                    <div");

WriteLiteral(" id=\"myDropdown\"");

WriteLiteral(" class=\"dropdown-content\"");

WriteLiteral(">\n                      <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(">Switch Role</a>\n                      <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(">My Profile</a>\n                      <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(">Settings</a>\n                      <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(">Logout</a>\n                    </div>\n                  </div>\n            </div" +
">\n\n            <div");

WriteLiteral(" id=\"username_container\"");

WriteLiteral(">\n              <h3>John Doe</h3>\n              <p");

WriteLiteral(" class=\"role\"");

WriteLiteral(">SUPERVISOR</p>\n            </div>\n\n          </div>\n        </div>\n      </div>\n" +
"      <!-- /header -->\n        \n        <div");

WriteLiteral(" class=\"container body-content\"");

WriteLiteral(">\n");

WriteLiteral("            ");


#line 77 "layoutback.cshtml"
       Write(RenderBody());


#line default
#line hidden
WriteLiteral("\n            <hr />\n            <footer>\n                <p>&copy; 2018 - allocat" +
"or</p>\n            </footer>\n        </div>\n\n        <environment");

WriteLiteral(" include=\"Development\"");

WriteLiteral(">\n            <script");

WriteAttribute ("src", " src=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/lib/jquery/dist/jquery.js")
, false)
);
WriteLiteral("></script>\n            <script");

WriteAttribute ("src", " src=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/lib/bootstrap/dist/js/bootstrap.js")
, false)
);
WriteLiteral("></script>\n            <script");

WriteAttribute ("src", " src=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/js/site.js")
, false)
);
WriteLiteral(" asp-append-version=\"true\"");

WriteLiteral("></script>\n        </environment>\n        <environment");

WriteLiteral(" exclude=\"Development\"");

WriteLiteral(">\n            <script");

WriteLiteral(" src=\"https://ajax.aspnetcdn.com/ajax/jquery/jquery-2.2.0.min.js\"");

WriteAttribute ("asp-fallback-src", "\n                    asp-fallback-src=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/lib/jquery/dist/jquery.min.js")
, false)
);
WriteLiteral("\n                    asp-fallback-test=\"window.jQuery\"");

WriteLiteral("\n                    crossorigin=\"anonymous\"");

WriteLiteral("\n                    integrity=\"sha384-K+ctZQ+LL8q6tP7I94W+qzQsfRV2a+AfHIi9k8z8l9" +
"ggpc8X+Ytst4yBo/hH+8Fk\"");

WriteLiteral(">\n            </script>\n            <script");

WriteLiteral(" src=\"https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.7/bootstrap.min.js\"");

WriteAttribute ("asp-fallback-src", "\n                    asp-fallback-src=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/lib/bootstrap/dist/js/bootstrap.min.js")
, false)
);
WriteLiteral("\n                    asp-fallback-test=\"window.jQuery && window.jQuery.fn && wind" +
"ow.jQuery.fn.modal\"");

WriteLiteral("\n                    crossorigin=\"anonymous\"");

WriteLiteral("\n                    integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mC" +
"WNIpG9mGCD8wGNIcPD7Txa\"");

WriteLiteral(">\n            </script>\n            <script");

WriteAttribute ("src", " src=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/js/site.min.js")
, false)
);
WriteLiteral(" asp-append-version=\"true\"");

WriteLiteral("></script>\n        </environment>\n\n");

WriteLiteral("        ");


#line 105 "layoutback.cshtml"
   Write(RenderSection("Scripts", required: false));


#line default
#line hidden
WriteLiteral("\n    </body>\n    </html>\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class layoutbackBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
