// <auto-generated />
using allocator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using MySql.Data.EntityFrameworkCore.Storage.Internal;
using System;

namespace allocator.Migrations
{
    [DbContext(typeof(AllocatorDBContext))]
    partial class AllocatorDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("allocator.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("allocator.Models.CourseWork", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<int>("UserId");

                    b.Property<string>("CourseName");

                    b.Property<string>("UserName");

                    b.HasKey("CourseId", "UserId");

                    b.ToTable("CourseWork");
                });

            modelBuilder.Entity("allocator.Models.Hour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CourseIdId");

                    b.Property<string>("Date");

                    b.Property<int>("HourType");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("PayRate");

                    b.Property<int?>("UserIdId");

                    b.HasKey("Id");

                    b.HasIndex("CourseIdId");

                    b.HasIndex("UserIdId");

                    b.ToTable("Hour");
                });

            modelBuilder.Entity("allocator.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("allocator.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CourseId");

                    b.Property<int?>("UserId");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("allocator.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("allocator.Models.Course", b =>
                {
                    b.HasOne("allocator.Models.User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("allocator.Models.CourseWork", b =>
                {
                    b.HasOne("allocator.Models.Course")
                        .WithMany("Lecturers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("allocator.Models.Hour", b =>
                {
                    b.HasOne("allocator.Models.Course", "CourseId")
                        .WithMany()
                        .HasForeignKey("CourseIdId");

                    b.HasOne("allocator.Models.User", "UserId")
                        .WithMany("WorkHours")
                        .HasForeignKey("UserIdId");
                });

            modelBuilder.Entity("allocator.Models.Role", b =>
                {
                    b.HasOne("allocator.Models.User")
                        .WithMany("RoleType")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("allocator.Models.Skill", b =>
                {
                    b.HasOne("allocator.Models.Course")
                        .WithMany("Requirements")
                        .HasForeignKey("CourseId");

                    b.HasOne("allocator.Models.User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
